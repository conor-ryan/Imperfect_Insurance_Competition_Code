using BenchmarkTools
using JLD2
using CSV
using Random
using Dates
using LinearAlgebra
using Statistics


# Data Structure
include("InsChoiceData.jl")

#Halton Draws
include("Halton.jl")

# Random Coefficients MLE
include("RandomCoefficients.jl")
# include("RandomCoefficients_2der_nonzero.jl")
include("RandomCoefficients_der.jl")
include("Contraction.jl")
include("Log_Likehood.jl")
include("RiskMoments.jl")
include("Estimate_Basic.jl")
include("Estimate_GMM.jl")
include("Estimate_TwoStage.jl")
include("GMM_Var.jl")
include("utility.jl")
include("DerivFunctions.jl")
include("Log_Likehood_Penalty.jl")
println("Code Loaded")

# Load the Data
include("load.jl")
spec_demoRaw = [:AgeFE_31_39,
:AgeFE_40_51,
:AgeFE_52_64,
:Family,
:LowIncome]
spec_prodchars=[:Price,:constant,:AV]
spec_prodchars_σ=[:constant,:AV,
# :AK_MODA_HEALTH_PLAN_INC,
:AK_PREMERA_BLUE_CROSS_BLUE_SHIELD_OF_ALASKA,
# :GA_AETNA,
:GA_BLUE_CROSS_BLUE_SHIELD_OF_GEORGIA,
:GA_UNITEDHEALTHCARE_LIFE_INS_CO,
:GA_UNITEDHEALTHCARE_OF_GEORGIA_INC,
:GA_ASSURANT_HEALTH,
:GA_CIGNA_HEALTH_AND_LIFE_INSURANCE_COMPANY,
:GA_HUMANA,
:GA_KAISER_PERMANENTE_GA,
:GA_AMBETTER_FROM_PEACH_STATE_HEALTH_PLAN,
# :IA_COVENTRY_HEALTH_CARE_OF_IOWA_INC,
:IA_WELLMARK_BLUE_CROSS_AND_BLUE_SHIELD_OF_IOWA,
:IA_AVERA_HEALTH_PLANS,
# :IL_AETNA,
:IL_AMBETTER_INSURED_BY_CELTIC,
:IL_BLUE_CROSS_AND_BLUE_SHIELD_OF_ILLINOIS,
:IL_COVENTRY,
:IL_HUMANA,
:IL_LAND_OF_LINCOLN_HEALTH,
:IL_UNITEDHEALTHCARE_LIFE_INS_CO,
:IL_UNITEDHEALTHCARE_OF_THE_MIDWEST_INC,
:IL_MY_HEALTH_ALLIANCE,
:IL_ASSURANT_HEALTH,
# :MD_CAREFIRST_BLUECROSS_BLUESHIELD,
:MD_KAISER_MIDATLANTIC,
# :MI_AETNA,
:MI_ASSURANT_HEALTH,
:MI_BLUE_CROSS_BLUE_SHIELD_OF_MICHIGAN,
:MI_HEALTH_ALLIANCE_PLAN,
:MI_HEALTHPLUS,
:MI_HUMANA,
:MI_PRIORITY_HEALTH,
:MI_UNITEDHEALTHCARE_COMMUNITY_PLAN_INC,
:MI_UNITEDHEALTHCARE_LIFE_INS_CO,
:MI_MOLINA_HEALTH_CARE,
# :MO_BLUE_CROSS_AND_BLUE_SHIELD_OF_KANSAS_CITY,
:MO_COVENTRY,
:MO_HUMANA,
:MO_UNITEDHEALTHCARE_LIFE_INS_CO,
:MO_ALL_SAVERS_INSURANCE_COMPANY,
:MO_ANTHEM_BLUE_CROSS_AND_BLUE_SHIELD,
:MO_CIGNA_HEALTH_AND_LIFE_INSURANCE_COMPANY,
# :ND_BLUE_CROSS_BLUE_SHIELD_OF_NORTH_DAKOTA,
:ND_MEDICA,
# :NE_ASSURANT_HEALTH,
:NE_BLUECROSS_BLUESHIELD_OF_NEBRASKA,
:NE_COVENTRY_HEALTH_CARE_OF_NEBRASKA_INC,
:NE_UNITEDHEALTHCARE_LIFE_INS_CO,
# :NM_BLUE_CROSS_AND_BLUE_SHIELD_OF_NEW_MEXICO,
:NM_MOLINA_HEALTH_CARE,
:NM_NEW_MEXICO_HEALTH_CONNECTIONS,
:NM_PRESBYTERIAN,
# :OK_BLUE_CROSS_AND_BLUE_SHIELD_OF_OKLAHOMA,
:OK_UNITEDHEALTHCARE_LIFE_INS_CO,
:OK_ASSURANT_HEALTH,
:OK_HUMANA,
# :OR_BRIDGESPAN,
:OR_HEALTH_NET_OF_OREGON,
:OR_HEALTH_REPUBLIC_INSURANCE,
:OR_KAISER_FOUNDATION_HEALTH_PLAN_OF_THE_NW,
:OR_LIFEWISE_HEALTH_PLAN_OF_OREGON,
:OR_MODA_HEALTH_PLAN_INC,
:OR_PACIFICSOURCE_HEALTH_PLANS,
:OR_PROVIDENCE_HEALTH_PLAN,
:OR_REGENCE_BLUECROSS_BLUESHIELD_OF_OREGON,
# :TX_BLUE_CROSS_AND_BLUE_SHIELD_OF_TEXAS,
:TX_FIRSTCARE,
:TX_UNITEDHEALTHCARE_LIFE_INS_CO,
:TX_AETNA_LIFE_INSURANCE_COMPANY,
:TX_ALL_SAVERS_INSURANCE_COMPANY,
:TX_CIGNA_HEALTH_AND_LIFE_INSURANCE_COMPANY,
:TX_HUMANA,
:TX_MOLINA_HEALTH_CARE,
:TX_SCOTT__WHITE_HEALTH_PLAN,
:TX_ASSURANT_HEALTH,
:TX_AMBETTER_FROM_SUPERIOR_HEALTHPLAN,
# :UT_ALTIUS_HEALTH_PLANS,
:UT_ARCHES_HEALTH_PLAN,
:UT_BRIDGESPAN,
:UT_HUMANA,
:UT_REGENCE_BLUECROSS_BLUESHIELD_OF_UTAH,
:UT_SELECTHEALTH,
:UT_UNITEDHEALTHCARE_LIFE_INS_CO,
:UT_MOLINA_HEALTH_CARE]
#Structure the data
c = ChoiceData(df,df_mkt,df_risk,df_transfer;
demoRaw=spec_demoRaw,
prodchars=spec_prodchars,
prodchars_σ=spec_prodchars_σ,
fixedEffects=[:Firm_ST])




param_labels = vcat(String.(spec_demoRaw),String.(spec_prodchars),"Price:" .* String.(spec_demoRaw),"Variance:".*String.(spec_prodchars_σ),c.feNames)

# Fit into model
m = InsuranceLogit(c,10)

sample = bootstrapSample(c)
m_sample = InsuranceLogit(sample,100)
println("Data Loaded")


γstart = rand(m.parLength[:γ])/10 .-.05
β0start = rand(m.parLength[:β])/10 .-.05
βstart = rand(m.parLength[:γ])/10 .- .05
σstart = rand(m.parLength[:σ])/10 .- .05

FEstart = rand(m.parLength[:FE])/100 .-.005

p0 = vcat(γstart,β0start,βstart,σstart,FEstart)
p0[14:15] = [0.0,1.0]

W = -Matrix(1.0I,length(m.data.rMoments),length(m.data.rMoments))./10
W[1,1] = -5.0
W[2,2] = -5.0
W[3,3] = -5.0
W[4,4] = -5.0
W[5,5] = -5.0

# p_est, fval = newton_raphson_ll(m,p0,W)


p_est = [-0.15799367504993345, -0.4153628912295182, -0.45674336645804414, -0.9475337332509999, -3.879988794151772, -1.9254516050881465, 0.3573414825776413, 6.277315546582472, 0.2866926453323004, 0.5703784526691383, 1.0701664687541006, 0.01240193147960682, 0.28673000335362375, 0.10113383380011481, 0.6817544328278611, -0.0579325023843436, -0.025472790895592543, -0.12330224139587104, -0.16189606556632025, -0.084807422681441, -0.024633111171614725, -0.07349530651371267, -0.009576766537880135,
 0.023430649464630138, 0.015301594021482763, -68.74082062437476, 0.02727664275328554, -0.09781732496943436, -0.040879893165931915, -0.08073240180901561, -0.06934673111562491, -0.10804019227521056, -0.07669282577378297, -0.07184221393682566, -0.16803860690048705, 0.008608434951336676, -0.11967032075410051, -0.11139106891185592, -0.1691216268553414, -0.06428936974700668, -0.1127504902128479, -0.05557196515427977, -0.11790166177134355, -0.17416975257633283, -0.12244589926714972,
 0.024708123043730577, -0.00829320973270816, -0.05936714471541686, 0.035431397035150164, 0.01066254905809042, 0.006945607700242543, 0.01685182922361058, -0.08414684349562071, -0.08066864195225716, -0.18491211739004612, 0.03345339140726396, 0.06954352277658189, 0.00735412372045152, -0.10832040878859672, 0.030527087250693277, -0.020683734054954578, -58.33549033964453, -0.10469343799753805, -0.10324555941307112, -0.04888857372617772, -0.06352810900511247, -0.13905734478425624,
 -0.07089129786010205, -0.05583555220220686, -0.008261667600064663, -0.06090098543000394, 0.05037212111143607, 0.02067947949302588, -0.0534313055943953, 0.006276693848131906, 0.006303410307235695, 0.04065080322927701, 0.008601285069322935, -0.29829539881317546, -0.00751331071405403, 0.0011975065477886318, -0.06792069354142997, -0.012742742206546333, -0.07193281777880861, -0.1358499154349588, -0.012413155997314356, 1.2034953394932033, -2.5502994149156613, -3.1253124135417267,
 -3.9933325477616806, -1.5251087963056698, -3.2414021958056938, -1.8966932417066438, -3.1638667758491716, -4.432957130631274, -3.8956214954634305, 3.576812457003183, -1.6752353655826229, -2.2598697750679113, -5.151619116119724, -5.5615596544945705, 0.2304791509645519, -1.2148832068373612, -2.552492062467374, -4.02191641715454, -3.2328100917420013, -1.6681183044539418, -3.9891112369768336, -5.237876832583667, -1.843649210291422, -4.104520645618052, -3.9872507861784747, -3.225012810294715,
  0.20120850933952486, -2.529123335763765, -2.8406405139842152, -2.5170272692361144, -4.076538318920816, -1.3991217790155275, -3.2405819455823535, -3.468667824511151, -1.8267744663345302, -1.5241962878487756, -0.47449525385854896, -2.4519415283925783, -1.2488645051031015, -2.8121779485891043, -3.059369043809599, 0.5409378680173231, -0.41448638735644655, -0.2322559735747762, -0.024463629861818343, 0.04631839418149392, -1.6057227249210064, -0.734374361821399, -3.232464438922126,
  -2.0111225633662286, -1.929465428623987, -4.049119353853824, -0.6097628813479259, -4.585759892033744, -3.8845838474404135, -5.150327406032447, -3.9282786789749387, -3.9666185327245462, -1.8050879653368086, -1.2341675010560986, -1.326082278508739, -2.5896338823352347, -1.0718621516823357, -2.2637025658543006, -3.4257683396008067, -3.0340098848954877, -3.4095120202610714, -4.706192806200132, -0.5238030490464243, -3.4986974813342577, -4.215409792932519, -2.7364988435579063,
  -6.287601934191264, -3.936737179500676, -4.172448472135178, -2.814472881943419, -1.9090869747554822, -2.9101611525036897, -2.562585802991304, -3.6286007734667534, -1.8704872674123634, -0.7311902745277835, -3.515399671003983]


mom, V = risk_moment_bootstrap(m,p_est)

# p0 = copy(p_est)

grad = Vector{Float64}(undef,length(p0))
grad_test = Vector{Float64}(undef,length(p0))
hess = Matrix{Float64}(undef,length(p0),length(p0))

ll = log_likelihood_penalty(m,p0,W)
println(ll)


ll = log_likelihood_penalty!(hess,grad,m,p_est,W)
println(ll)
ll = log_likelihood_penalty!(grad_test,m,p0,W)
println(ll)


f_obj(x) = log_likelihood_penalty(m,x,W)


grad_1 = Vector{Float64}(undef,length(p0))
hess_1 = Matrix{Float64}(undef,length(p0),length(p0))
fval = f_obj(p0)
println(fval-ll)

println("Grad")
ForwardDiff.gradient!(grad_1,f_obj, p0)#, cfg)
println(maximum(abs.(grad_1-grad)))
#
println("Hessian")
cfg = ForwardDiff.HessianConfig(f_obj, p0, ForwardDiff.Chunk{8}())
ForwardDiff.hessian!(hess_1,f_obj, p0)#,cfg)
println(maximum(abs.(hess_1-hess)))



@benchmark calc_risk_moments(m_sample,p_est)

using Profile
Profile.init()
Profile.clear()
Juno.@profile sample = calc_risk_moments(m_sample,p_est)
Juno.profiler()



d = m
p = parDict(m_sample,p_est,no2Der=false)

grad = Vector{Float64}(undef,length(p0))
hess = Matrix{Float64}(undef,length(p0),length(p0))
ll = log_likelihood!(hess,grad,m,p)

mom_grad = Matrix{Float64}(undef,length(p0),length(d.data.rMoments))
mom_hess = Array{Float64,3}(undef,length(p0),length(p0),length(d.data.rMoments))

grad = Vector{Float64}(undef,length(p0))
hess = Matrix{Float64}(undef,length(p0),length(p0))

# mom = calc_risk_moments!(mom_grad,d,p)
mom = calc_risk_moments!(mom_hess,mom_grad,d,p)

obj = calc_GMM_Obj(mom,W)

grad[:].=0.0
hess[:].=0.0
calc_GMM_Grad!(grad,mom,mom_grad,W)
calc_GMM_Hess!(hess,mom,mom_grad,mom_hess,W)

# app = iterate(eachperson(d.data),11)[1]
# grad[:].=0.0
# hess[:].=0.0
# ll, ind = ll_obs_hessian!(hess,grad,app,d,p)
#
#
#
# f_obj_ll(x) = log_likelihood(m,x)
# grad_ll = Vector{Float64}(undef,length(p0))
# hess_ll = Matrix{Float64}(undef,length(p0),length(p0))
# println(f_obj_ll(p0))
# println("Hessian")
# cfg = ForwardDiff.HessianConfig(f_obj_ll, p0, ForwardDiff.Chunk{8}())
# ForwardDiff.hessian!(hess_ll,f_obj_ll, p0)#,cfg)


f_obj_p(x) = calc_penalty(m,x,W)
grad_pen = Vector{Float64}(undef,length(p0))
hess_pen = Matrix{Float64}(undef,length(p0),length(p0))
println(f_obj_p(p0))
println("Grad")
ForwardDiff.gradient!(grad_pen,f_obj_p, p0)#, cfg)



println("Hessian")
cfg = ForwardDiff.HessianConfig(f_obj_p, p0, ForwardDiff.Chunk{8}())
ForwardDiff.hessian!(hess_pen,f_obj_p, p0)#,cfg)
