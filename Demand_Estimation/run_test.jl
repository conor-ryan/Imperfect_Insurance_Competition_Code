using BenchmarkTools
using JLD2
using CSV
using Random
using Dates
using LinearAlgebra
using Statistics


# Data Structure
include("InsChoiceData.jl")

#Halton Draws
include("Halton.jl")

# Random Coefficients MLE
include("RandomCoefficients.jl")
# include("RandomCoefficients_2der_nonzero.jl")
include("RandomCoefficients_der.jl")
include("Contraction.jl")
include("Log_Likehood.jl")
include("RiskMoments.jl")
include("Estimate_Basic.jl")
include("Estimate_GMM.jl")
include("Estimate_TwoStage.jl")
include("GMM_Var.jl")
include("utility.jl")
include("DerivFunctions.jl")
include("Log_Likehood_Penalty.jl")
println("Code Loaded")

# Load the Data
include("load.jl")
spec_demoRaw = [:AgeFE_31_39,
:AgeFE_40_51,
:AgeFE_52_64,
:Family,
:LowIncome]
spec_prodchars=[:Price,:constant,:AV]
spec_prodchars_σ=[:constant,:AV,
# :AK_MODA_HEALTH_PLAN_INC,
:AK_PREMERA_BLUE_CROSS_BLUE_SHIELD_OF_ALASKA,
# :GA_AETNA,
:GA_BLUE_CROSS_BLUE_SHIELD_OF_GEORGIA,
:GA_UNITEDHEALTHCARE_LIFE_INS_CO,
:GA_UNITEDHEALTHCARE_OF_GEORGIA_INC,
:GA_ASSURANT_HEALTH,
:GA_CIGNA_HEALTH_AND_LIFE_INSURANCE_COMPANY,
:GA_HUMANA,
:GA_KAISER_PERMANENTE_GA,
:GA_AMBETTER_FROM_PEACH_STATE_HEALTH_PLAN,
# :IA_COVENTRY_HEALTH_CARE_OF_IOWA_INC,
:IA_WELLMARK_BLUE_CROSS_AND_BLUE_SHIELD_OF_IOWA,
:IA_AVERA_HEALTH_PLANS,
# :IL_AETNA,
:IL_AMBETTER_INSURED_BY_CELTIC,
:IL_BLUE_CROSS_AND_BLUE_SHIELD_OF_ILLINOIS,
:IL_COVENTRY,
:IL_HUMANA,
:IL_LAND_OF_LINCOLN_HEALTH,
:IL_UNITEDHEALTHCARE_LIFE_INS_CO,
:IL_UNITEDHEALTHCARE_OF_THE_MIDWEST_INC,
:IL_MY_HEALTH_ALLIANCE,
:IL_ASSURANT_HEALTH,
# :MD_CAREFIRST_BLUECROSS_BLUESHIELD,
:MD_KAISER_MIDATLANTIC,
# :MI_AETNA,
:MI_ASSURANT_HEALTH,
:MI_BLUE_CROSS_BLUE_SHIELD_OF_MICHIGAN,
:MI_HEALTH_ALLIANCE_PLAN,
:MI_HEALTHPLUS,
:MI_HUMANA,
:MI_PRIORITY_HEALTH,
:MI_UNITEDHEALTHCARE_COMMUNITY_PLAN_INC,
:MI_UNITEDHEALTHCARE_LIFE_INS_CO,
:MI_MOLINA_HEALTH_CARE,
# :MO_BLUE_CROSS_AND_BLUE_SHIELD_OF_KANSAS_CITY,
:MO_COVENTRY,
:MO_HUMANA,
:MO_UNITEDHEALTHCARE_LIFE_INS_CO,
:MO_ALL_SAVERS_INSURANCE_COMPANY,
:MO_ANTHEM_BLUE_CROSS_AND_BLUE_SHIELD,
:MO_CIGNA_HEALTH_AND_LIFE_INSURANCE_COMPANY,
# :ND_BLUE_CROSS_BLUE_SHIELD_OF_NORTH_DAKOTA,
:ND_MEDICA,
# :NE_ASSURANT_HEALTH,
:NE_BLUECROSS_BLUESHIELD_OF_NEBRASKA,
:NE_COVENTRY_HEALTH_CARE_OF_NEBRASKA_INC,
:NE_UNITEDHEALTHCARE_LIFE_INS_CO,
# :NM_BLUE_CROSS_AND_BLUE_SHIELD_OF_NEW_MEXICO,
:NM_MOLINA_HEALTH_CARE,
:NM_NEW_MEXICO_HEALTH_CONNECTIONS,
:NM_PRESBYTERIAN,
# :OK_BLUE_CROSS_AND_BLUE_SHIELD_OF_OKLAHOMA,
:OK_UNITEDHEALTHCARE_LIFE_INS_CO,
:OK_ASSURANT_HEALTH,
:OK_HUMANA,
# :OR_BRIDGESPAN,
:OR_HEALTH_NET_OF_OREGON,
:OR_HEALTH_REPUBLIC_INSURANCE,
:OR_KAISER_FOUNDATION_HEALTH_PLAN_OF_THE_NW,
:OR_LIFEWISE_HEALTH_PLAN_OF_OREGON,
:OR_MODA_HEALTH_PLAN_INC,
:OR_PACIFICSOURCE_HEALTH_PLANS,
:OR_PROVIDENCE_HEALTH_PLAN,
:OR_REGENCE_BLUECROSS_BLUESHIELD_OF_OREGON,
# :TX_BLUE_CROSS_AND_BLUE_SHIELD_OF_TEXAS,
:TX_FIRSTCARE,
:TX_UNITEDHEALTHCARE_LIFE_INS_CO,
:TX_AETNA_LIFE_INSURANCE_COMPANY,
:TX_ALL_SAVERS_INSURANCE_COMPANY,
:TX_CIGNA_HEALTH_AND_LIFE_INSURANCE_COMPANY,
:TX_HUMANA,
:TX_MOLINA_HEALTH_CARE,
:TX_SCOTT__WHITE_HEALTH_PLAN,
:TX_ASSURANT_HEALTH,
:TX_AMBETTER_FROM_SUPERIOR_HEALTHPLAN,
# :UT_ALTIUS_HEALTH_PLANS,
:UT_ARCHES_HEALTH_PLAN,
:UT_BRIDGESPAN,
:UT_HUMANA,
:UT_REGENCE_BLUECROSS_BLUESHIELD_OF_UTAH,
:UT_SELECTHEALTH,
:UT_UNITEDHEALTHCARE_LIFE_INS_CO,
:UT_MOLINA_HEALTH_CARE]
#Structure the data
c = ChoiceData(df,df_mkt,df_risk,df_transfer;
demoRaw=spec_demoRaw,
prodchars=spec_prodchars,
prodchars_σ=spec_prodchars_σ,
fixedEffects=[:Firm_ST])


param_labels = vcat(String.(spec_demoRaw),String.(spec_prodchars),"Price:" .* String.(spec_demoRaw),"Variance:".*String.(spec_prodchars_σ),c.feNames)

# Fit into model
m = InsuranceLogit(c,100)
println("Data Loaded")


γstart = rand(m.parLength[:γ])/10 .-.05
β0start = rand(m.parLength[:β])/10 .-.05
βstart = rand(m.parLength[:γ])/10 .- .05
σstart = rand(m.parLength[:σ])/10 .- .05

FEstart = rand(m.parLength[:FE])/100 .-.005

p0 = vcat(γstart,β0start,βstart,σstart,FEstart)
p0[14:15] = [0.0,1.0]

W = -Matrix(1.0I,length(m.data.rMoments),length(m.data.rMoments))./10
W[1,1] = 5.0
W[2,2] = 5.0
W[3,3] = 5.0
W[4,4] = 5.0
W[5,5] = 5.0

p_est, fval = newton_raphson_ll(m,p0,W)


p_est2 = [-0.19486968520426798, -0.3226197759765845, -0.14737683428060067, -0.8422343184017588, -4.078964153472206, -1.6496210508448024, -0.803738521878347, 6.869205250766511, 0.179575698976183, 0.30603647875042445, 0.7501005852892468, -0.06140696363966211, -0.15424724060069941, 68.60973429326164, 1.287484862837668, -0.011058833156990824, 0.0055455914047392914, -0.12827642716929563, -0.18844305332593145, -0.04116875086432019, 0.01069297330420169, -0.10756500342475772, 0.02242384371724014,
 0.0388136031563466, 0.06871493981214828, -3.4673376280524075, -0.0468536502234824, -0.1907366162953893, -0.10805886298320178, -0.11534742258502534, -0.167926038640415, -0.15837820684838147, -0.16243254903538126, -0.13651289390123644, 0.043827566344364605, -0.007374336830256743, -0.13719075230684413, -0.13935026674904366, -0.24705205207955022, -0.12634944620194255, -0.21924727132343652, -0.07385230806127054, -0.22455955759941715, -0.2725249070824742, -0.19904377874478743, -0.00579520839042651,
-0.05802493002119896, -0.13987050311173685, -0.012709846184949306, -0.0046313090617554065, -0.024692373725279448, 0.0077114604536787585, -0.14504550299611516, -0.1719277008523805, -0.3115122672758961, 0.000369304720384492, 0.0387557152251607, 0.0013201944255567262, -0.11688651717860779, 0.0997026692370699, 0.026259086378757197, -2.1527471135971066, -0.13517700487664824, -0.15166912497886045, -0.08990604212127656, -0.10109311830569462, -0.17462013668150655, -0.11394764311941413,
-0.06514723783259023, -0.05392011593169251, -0.12484669622757556, 0.03539181032604888, -0.0944202157450745, -0.0689613283597335, -0.05873281381432845, -0.0640663458793325, -0.010274423216126517, 0.023740087490707974, -0.3557072517306579, -0.00910152626479072, 0.004093555667242326, -0.12161769712273567, -0.003711342087874864, -0.08299243765430461, -0.15267943199077919, -0.0337605596551518, 1.9985760327135071, -2.32695139687899, -2.796297625808495, -2.8326321439119564, -1.0501696905893285,
-2.4531832919412646, -1.122173692066563, -2.491674849868073, -3.052313179297947, -2.458526238539091, 3.729861881410091, -1.5452227770618017, -1.6860629274625525, -4.411207115894609, -4.646178229489769, 5.648667590517828, -0.26809281313799316, -1.8975130725453602, -3.033812141148629, -2.518811726793168, -0.9122184688076201, -2.9474585626567262, -4.332918401359202, -0.5635311398031372, -2.873972875247987, -3.050085251020109, -2.0641833366650353, 1.1196795248452656, -1.8911500026152679,
-1.514141336297694, -1.7277101569135433, -3.194734349322626, -0.5991883491993784, -2.349617393285192, -2.175442780544973, -1.4304760175620002, -0.8651423547655365, 0.3086572118562611, -1.725506857972556, -0.7704882132552897, -2.102567463669423, -2.033390340091857, 1.7681380957129564, 0.4027246561682925, 0.8635948843980296, 0.814958516602563, 0.542907367438219, 0.24622510085523402, 0.035985484706767885, -2.6759456100739585, -1.7030871767240892, -1.1875356621139823, -3.2588458079209954,
-0.19843279332527972, -4.0627454033701484, -2.7958897787541086, -4.587052791336155, -1.376669892223741, -2.553662496086474, -0.7438559813108304, -0.6062175915408714, -0.6037227431070301, -1.2665766879127343, -0.3191315620593988, -1.30796678453786, -2.8900336223484726, -2.589384062764672, -2.9584650164049324, -3.8559155316720166, 0.10313961619083611, -2.839985372483624, -3.7598862041847076, -2.0711659316812265, -5.933685909532758, -3.565945755798392, -3.214754559700827, -2.0402132744673134,
-1.1701702194095862, -2.164455624014707, -1.634844400084515, -3.157790836806215, -0.9742415639568361, 0.21026740300854335, -1.9036520518103897]


# p0 = copy(p_est)

grad = Vector{Float64}(undef,length(p0))
grad_test = Vector{Float64}(undef,length(p0))
hess = Matrix{Float64}(undef,length(p0),length(p0))

ll = log_likelihood_penalty(m,p0,W)
println(ll)


ll = log_likelihood_penalty!(hess,grad,m,p_est,W)
println(ll)
ll = log_likelihood_penalty!(grad_test,m,p0,W)
println(ll)


f_obj(x) = log_likelihood_penalty(m,x,W)


grad_1 = Vector{Float64}(undef,length(p0))
hess_1 = Matrix{Float64}(undef,length(p0),length(p0))
fval = f_obj(p0)
println(fval-ll)

println("Grad")
ForwardDiff.gradient!(grad_1,f_obj, p0)#, cfg)
println(maximum(abs.(grad_1-grad)))
#
println("Hessian")
cfg = ForwardDiff.HessianConfig(f_obj, p0, ForwardDiff.Chunk{8}())
ForwardDiff.hessian!(hess_1,f_obj, p0)#,cfg)
println(maximum(abs.(hess_1-hess)))



d = m
p = parDict(d,p_est,no2Der=false)

grad = Vector{Float64}(undef,length(p0))
hess = Matrix{Float64}(undef,length(p0),length(p0))
ll = log_likelihood!(hess,grad,m,p)

mom_grad = Matrix{Float64}(undef,length(p0),length(d.data.rMoments))
mom_hess = Array{Float64,3}(undef,length(p0),length(p0),length(d.data.rMoments))

grad = Vector{Float64}(undef,length(p0))
hess = Matrix{Float64}(undef,length(p0),length(p0))

# mom = calc_risk_moments!(mom_grad,d,p)
mom = calc_risk_moments!(mom_hess,mom_grad,d,p)

obj = calc_GMM_Obj(mom,W)

grad[:].=0.0
hess[:].=0.0
calc_GMM_Grad!(grad,mom,mom_grad,W)
calc_GMM_Hess!(hess,mom,mom_grad,mom_hess,W)

# app = iterate(eachperson(d.data),11)[1]
# grad[:].=0.0
# hess[:].=0.0
# ll, ind = ll_obs_hessian!(hess,grad,app,d,p)
#
#
#
# f_obj_ll(x) = log_likelihood(m,x)
# grad_ll = Vector{Float64}(undef,length(p0))
# hess_ll = Matrix{Float64}(undef,length(p0),length(p0))
# println(f_obj_ll(p0))
# println("Hessian")
# cfg = ForwardDiff.HessianConfig(f_obj_ll, p0, ForwardDiff.Chunk{8}())
# ForwardDiff.hessian!(hess_ll,f_obj_ll, p0)#,cfg)


f_obj_p(x) = calc_penalty(m,x,W)
grad_pen = Vector{Float64}(undef,length(p0))
hess_pen = Matrix{Float64}(undef,length(p0),length(p0))
println(f_obj_p(p0))
println("Grad")
ForwardDiff.gradient!(grad_pen,f_obj_p, p0)#, cfg)



println("Hessian")
cfg = ForwardDiff.HessianConfig(f_obj_p, p0, ForwardDiff.Chunk{8}())
ForwardDiff.hessian!(hess_pen,f_obj_p, p0)#,cfg)
