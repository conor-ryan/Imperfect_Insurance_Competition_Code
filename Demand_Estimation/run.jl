using BenchmarkTools
using JLD
using CSV

# Data Structure
include("InsChoiceData.jl")

#Halton Draws
include("Halton.jl")

# Random Coefficients MLE
include("MLE_RC.jl")
println("Code Loaded")

# Load the Data
include("load_sample.jl")
# Structre the data
c = ChoiceData(df,df_mkt)

# Fit into model
m = InsuranceLogit(c,1)

# -2.6967 in 1727 evaluations
# Initial Parameters
γstart = Array{Float64}([0,0,0])/100
#γstart = Array{Float64}([0,0,0,0,0,0,0])/100
β0start = -ones(3)/10
βstart = -ones(5)/10
σstart = [1,1,-1.5]/10
p0 = vcat(γstart,β0start,βstart)#,σstart)

# p0 = [1.80041, 1.55477, -5.43947, -0.363799, -0.525593,
# 1.52131, -0.06377, -0.35665, -8.09913, -0.0519747, 0.742158]
#p0 = vcat(β0start,βstart)
# p0 = [-0.195938, 0.253235, 0.516015, -0.168222, -0.0508759, -0.527343, -0.396065,
#     -0.149112, 0.00705938, 0.0588234, 0.0315465, -0.141726, 0.0651431, 0.279406, 0.217439,
#     0.106517, -0.016283, -0.258406, -0.0900659, -1.21492, 0.233004, -0.0147776, 0.1635,
#      0.0783282, 0.074761]

# p0 = [0.0576722, 0.0616882, 0.0685012, -0.00806572, -0.0151571, -0.0193941,
#  -0.00620399, 0.0122666, 0.0253093, 0.0262103, 0.0259141, 0.0360304, 0.0542378,
#   0.0282865, 0.00276404, -0.0553111, -0.0776253, -0.141009, -0.0959306,
#   -0.0867197, 0.035496, 0.0306258, 0.0347868, 0.0254983, 0.0120267]

# p0 = [0.0482056, 0.0556701, 0.0616089,
# 0.0572539, -0.0358625, 0.0377119, -0.064001,
# -0.335578, -0.264522, -0.0173447,
# 0.0566126,  0.0501532, -0.069754,
#  0.199378, 0.181476, 0.0116419,
# -0.213134, -0.120886, -0.401103,
#  0.143654,0.0847654, 0.0335804, 0.00734248]

# p0 = [0.649123, 0.735146, 0.264111, -0.00440466,
# -0.0272147, -0.0657219, 0.13696, -0.0492856, 0.00840649,
#  -0.0251686, 0.105998, 0.106207, -0.0368667, -0.189926,
#  -0.149426, -0.159301, -0.484893, -0.561132, -0.166367]
#  -0.148736, 0.498083, 0.10483, -0.456167]

# p0 = [0.594966, 0.426402, 0.2166, -0.000929903, 0.169328, -0.124206,
#  -0.0159892, -0.0204331, 0.00974905, -0.105066, -0.00923462,
#   0.0908266, -0.00417799, -0.275349, -0.191484, -0.202004,
#    -0.132167, -0.666478, 0.470176]
#
# p0 = [0.0686126, 0.30439, 0.328558, 0.00422343, -0.152135, -0.184443,
#  -1.25296, 0.0132427, 0.04849, 0.12201, 0.305019, 0.0722374,
#  -0.00177872, -0.520909, 0.0910519, -0.193888, -0.135329,
#   -0.582727, 0.297265]

# p0 = [-0.430091, 0.00144835, -0.0595232,
#  -0.133074, -0.252953, -0.0744488, 0.156198,
#   0.103076, 0.0797703, 0.22223, 0.0559742,
#   0.131409, 0.00515514, 0.0967912, 0.258083,
#   -0.145048, -0.112375, 0.0644985, -0.100451]
#p1 = p0/2
# unpack!(m,parStart)
parStart0 = parDict(m,p0)
#parStart1 = parDict(m,p1)
println("Data Loaded")

# Estimate the Model
p_est = estimate!(m, p0)
#p_est = gradient_ascent(m,p0,max_step=1,grad_tol=1e-5)

run = Dates.today()
file = "$(homedir())/Documents/Research/Imperfect_Insurance_Competition/Estimation_Output/estimationresults_$run.jld"
save(file,"p_est",p_est)
